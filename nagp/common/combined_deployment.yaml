---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  POSTGRES_DB: "userdb"
  POSTGRES_USER: "satyam"
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
type: Opaque
data:
  POSTGRES_PASSWORD: bmFnYXJybw==
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  labels:
    app: postgres
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/Users/satyamvats/Documents/ioco/poc/Kubernetes/nagp/postgress/database"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres-headless"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: postgres-storage
              mountPath: "/Users/satyamvats/Documents/ioco/poc/Kubernetes/nagp/postgress/database"
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: standard
---

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: development
data:
  GIN_MODE: "debug"
  LOG_FILE_PATH: "./log"
  DATABASE_HOST: "postgres-headless.development.svc.cluster.local"
---
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: development
type: Opaque
data:
  DATABASE_NAME: dXNlcmRi
  DATABASE_USER: c2F0eWFt
  DATABASE_PASSWORD: bmFnYXJybw==
  DATABASE_PORT: NTQzMg==
  SERVICE_PORT: ODA4MA==
  BASIC_AUTH_USER: YXV0aF91c2Vy
  BASIC_AUTH_PASSWORD: YXV0aF9wYXNz
  JWT_SECRET_KEY: MTIzNDVfU2F0eWFt
  JWT_EXPIRATION_TIME: NjA=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-api-deployment
  namespace: development
spec:
  replicas: 3
  selector:
    matchLabels:
      app: go-api
  template:
    metadata:
      labels:
        app: go-api
    spec:
      containers:
        - name: go-api-container
          image: satyamvatstyagi/user-management-service:1.0.1
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: GIN_MODE
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: GIN_MODE
            - name: LOG_FILE_PATH
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: LOG_FILE_PATH
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: DATABASE_NAME
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: DATABASE_PASSWORD
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: DATABASE_PORT
            - name: SERVICE_PORT
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: SERVICE_PORT
            - name: BASIC_AUTH_USER
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: BASIC_AUTH_USER
            - name: BASIC_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: BASIC_AUTH_PASSWORD
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: JWT_SECRET_KEY
            - name: JWT_EXPIRATION_TIME
              valueFrom:
                secretKeyRef:
                  name: api-secrets
                  key: JWT_EXPIRATION_TIME
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: go-api-hpa
  namespace: development
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: go-api-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 10
---
apiVersion: v1
kind: Service
metadata:
  name: go-api-loadbalancer
  namespace: development
spec:
  type: LoadBalancer
  selector:
    app: go-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: go-api-ingress
  namespace: development
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: "go-api.local"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: go-api-loadbalancer
                port:
                  number: 80
